{"ast":null,"code":"var _jsxFileName = \"/home/walid/Bureau/sort/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport linkedin from './linkedin.png';\nimport cloneDeep from 'lodash/cloneDeep';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.quickSort = (debut, fin) => {\n      if (debut <= fin) {\n        let p = this.partition(debut, fin);\n        this.quickSort(debut, p - 1);\n        this.quickSort(p + 1, fin);\n      }\n    };\n\n    this.partition = (debut, fin) => {\n      let pivot = this.state.boardSol[fin];\n      let i = debut;\n\n      for (let j = debut; j <= fin; j++) {\n        if (this.state.boardSol[j] < pivot) {\n          this.swap(i, j, fin, false);\n          i = i + 1;\n        }\n      }\n\n      this.swap(i, fin, fin, true);\n      return i;\n    };\n\n    this.shellSort = () => {\n      this.state.boardSol.forEach((elt, gap) => {\n        for (let i = gap; i < this.state.length; i = i + 1) {\n          let temp = this.state.boardSol[i];\n          let j = i;\n\n          for (j = i; j >= gap && this.state.boardSol[j - gap] > temp; j = j - gap) {\n            this.swap(j, j - gap, undefined, false);\n          }\n\n          let fuck = this.state.boardSol;\n          fuck[j] = temp;\n          this.setState({\n            boardSol: fuck\n          });\n        }\n      });\n    };\n\n    this.selectionSort = () => {\n      for (let i = 0; i < this.state.length - 1; i = i + 1) {\n        let jmin = i;\n\n        for (let j = i + 1; j < this.state.length; j = j + 1) {\n          this.swap(j, j, undefined, false);\n\n          if (this.state.boardSol[j] < this.state.boardSol[jmin]) {\n            jmin = j;\n          }\n        }\n\n        this.swap(i, jmin, undefined, true);\n      }\n\n      this.swap(this.state.length - 1, this.state.length - 1, undefined, true);\n    };\n\n    this.mergeSort = (debut, fin) => {\n      if (0 <= debut && debut < fin) {\n        let middle = Math.floor((fin + debut) / 2);\n        this.mergeSort(debut, middle);\n        this.mergeSort(middle + 1, fin);\n        this.merge(debut, middle, fin);\n      }\n    };\n\n    this.heapSort = () => {\n      let n = this.state.length;\n\n      for (let i = n - 1; i >= 0; i--) {\n        this.heapify(n, i);\n      }\n\n      for (let i = n - 1; i >= 0; i--) {\n        this.swap(i, 0, undefined, true);\n        this.heapify(i, 0);\n      }\n    };\n\n    let t = this.generateGrid(30);\n    this.state = {\n      algo: 'Quicksort',\n      length: 30,\n      board: t,\n      boardSol: cloneDeep(t),\n      speed: 'Fast',\n      speedVal: 100,\n      orange: [],\n      green: [],\n      solution: [],\n      finaltab: Array.from({\n        length: 30\n      }, () => 0),\n      can: true\n    };\n  }\n\n  generateGrid(l) {\n    return Array.from({\n      length: l\n    }, () => Math.floor(Math.random() * 100));\n  }\n\n  onchangeGrid() {\n    let tab = this.generateGrid(this.state.length);\n    this.setState({\n      board: tab,\n      boardSol: cloneDeep(tab),\n      orange: cloneDeep([]),\n      green: cloneDeep([]),\n      solution: [],\n      finaltab: Array.from({\n        length: this.state.length\n      }, () => 0),\n      can: true\n    });\n  }\n\n  onchangeAlgo(e) {\n    this.setState({\n      algo: e.target.value\n    });\n  }\n\n  onchangeSpeed(e) {\n    let s = 100;\n\n    if (e.target.value === 'Average') {\n      s = 200;\n    } else if (e.target.value === 'Slow') {\n      s = 400;\n    }\n\n    this.setState({\n      speed: e.target.value,\n      speedVal: s\n    });\n  }\n\n  onchangeLength(e) {\n    if (e.target.value !== this.state.length) {\n      let l = e.target.value;\n      let tab = this.generateGrid(l);\n      this.setState({\n        length: l,\n        board: tab,\n        boardSol: cloneDeep(tab),\n        solution: [],\n        green: [],\n        orange: [],\n        finaltab: Array.from({\n          length: l\n        }, () => 0),\n        can: true\n      });\n    }\n  }\n\n  sort() {\n    if (this.state.can) {\n      this.setState({\n        can: false\n      });\n\n      if (this.state.algo === 'Quicksort') {\n        this.quickSort(0, this.state.length - 1);\n      } else if (this.state.algo === 'Merge sort') {\n        this.mergeSort(0, this.state.board.length - 1);\n      } else if (this.state.algo === 'Shellsort') {\n        this.shellSort();\n      } else if (this.state.algo === 'selection Sort') {\n        this.selectionSort();\n      } else if (this.state.algo === 'Heapsort') {\n        this.heapSort();\n      }\n\n      if (this.state.algo === 'Merge sort') {\n        this.state.solution.map((e, i) => {\n          return setTimeout(() => {\n            let tab = this.state.board;\n            tab[e.x] = e.y;\n            let g = [e.x, e.r];\n            this.setState({\n              board: tab,\n              green: g\n            });\n          }, this.state.speedVal * i);\n        });\n      } else {\n        this.state.solution.map((e, i) => {\n          return setTimeout(() => {\n            let tab = this.state.board;\n            let ilast = this.state.board[e.x];\n            tab[e.x] = this.state.board[e.y];\n            tab[e.y] = ilast;\n            let g = [e.x, e.y];\n            let r = [];\n            if (e.p !== undefined) r.push(e.p);\n\n            if (e.final) {\n              let t = this.state.finaltab;\n              t[e.x] = 1;\n              this.setState({\n                finaltab: t\n              });\n            }\n\n            this.setState({\n              green: g,\n              orange: r,\n              board: tab\n            });\n          }, this.state.speedVal * i);\n        });\n      }\n    }\n  }\n\n  isorange(index) {\n    return this.state.orange.includes(index);\n  }\n\n  isgreen(index) {\n    return this.state.green.includes(index);\n  }\n\n  isFinal(index) {\n    return this.state.finaltab[index] === 1;\n  }\n\n  displayBoard() {\n    const numWidth = Math.floor(window.innerWidth / (this.state.length * 3));\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"bodyContainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 7\n      }\n    }, this.state.board.map((value, index) => {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: index,\n        className: `arrayElement , ${this.isFinal(index) ? 'res' : this.isgreen(index) ? 'green' : this.isorange(index) ? 'orange' : ''}`,\n        style: {\n          height: `${value * 3}px`,\n          width: `${numWidth}px`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 18\n        }\n      });\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"App\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"App-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"toolbar\",\n      role: \"banner\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }\n    }, \"Algorithms\", /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.algo,\n      onChange: event => this.onchangeAlgo(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 15\n      }\n    }, \"Quicksort\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 15\n      }\n    }, \"Merge sort\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 15\n      }\n    }, \"Heapsort\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 15\n      }\n    }, \"Shellsort\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 15\n      }\n    }, \"selection Sort\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.onchangeGrid.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 13\n      }\n    }, \"generate Grid\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 13\n      }\n    }), \"length\", /*#__PURE__*/React.createElement(\"input\", {\n      value: this.state.length,\n      type: \"range\",\n      min: \"0\",\n      max: \"100\",\n      onChange: event => this.onchangeLength(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 13\n      }\n    }), \"Speed\", /*#__PURE__*/React.createElement(\"select\", {\n      value: this.state.speed,\n      onChange: event => this.onchangeSpeed(event),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 15\n      }\n    }, \"Fast\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 15\n      }\n    }, \"Average\"), /*#__PURE__*/React.createElement(\"option\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 15\n      }\n    }, \"Slow\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.sort.bind(this),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }\n    }, \"Sort\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"spacer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://www.linkedin.com/in/walid-boukris-179771157/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      width: \"40\",\n      src: linkedin,\n      alt: \"Linkedin\",\n      title: \"linkedin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 15\n      }\n    }))), this.displayBoard(), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"tbody\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"res\",\n      width: \"40\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 17\n      }\n    }, \"final Position\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"orange\",\n      width: \"40\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 17\n      }\n    }, \"pivot\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"green\",\n      width: \"40\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, \"position in traitement\")), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      className: \"normal\",\n      width: \"40\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 17\n      }\n    }, \"non treated position\"))))));\n  }\n  /* AlgoooooooooooooooooooooooooooooooooooooooooS */\n\n  /** Swap Function */\n\n\n  swap(i, j, pivot, f) {\n    let tab = this.state.boardSol;\n    let ilast = this.state.boardSol[i];\n    tab[i] = this.state.boardSol[j];\n    tab[j] = ilast;\n    this.setState({\n      boardSol: tab,\n      solution: this.state.solution.push({\n        'x': i,\n        'y': j,\n        'p': pivot,\n        'final': f\n      })\n    });\n  }\n  /** Quicksort */\n\n\n  merge(debut, middle, fin) {\n    let L = [];\n    let R = [];\n    let n1 = middle - debut + 1;\n    let n2 = fin - middle;\n\n    for (let i = 0; i < n1; ++i) {\n      L.push(this.state.boardSol[debut + i]);\n    }\n\n    for (let j = 0; j < n2; ++j) {\n      R.push(this.state.boardSol[middle + 1 + j]);\n    }\n\n    let i = 0;\n    let j = 0;\n    let k = debut;\n\n    while (i < n1 && j < n2) {\n      if (L[i] <= R[j]) {\n        let tab = this.state.boardSol;\n        tab[k] = L[i];\n        this.setState({\n          boardSol: tab,\n          solution: this.state.solution.push({\n            'x': k,\n            'y': L[i],\n            'p': undefined,\n            'finale': false,\n            'r': debut + i\n          })\n        });\n        i++;\n      } else {\n        let tab = this.state.boardSol;\n        tab[k] = R[j];\n        this.setState({\n          boardSol: tab,\n          solution: this.state.solution.push({\n            'x': k,\n            'y': R[j],\n            'p': undefined,\n            'finale': false,\n            'r': middle + 1 + j\n          })\n        });\n        j++;\n      }\n\n      k++;\n    }\n    /* Copy remaining elements of L[] if any */\n\n\n    while (i < n1) {\n      let tab = this.state.boardSol;\n      tab[k] = L[i];\n      this.setState({\n        boardSol: tab,\n        solution: this.state.solution.push({\n          'x': k,\n          'y': L[i],\n          'p': undefined,\n          'finale': false,\n          'r': debut + i\n        })\n      });\n      i++;\n      k++;\n    }\n    /* Copy remaining elements of R[] if any */\n\n\n    while (j < n2) {\n      let tab = this.state.boardSol;\n      tab[k] = R[j];\n      this.setState({\n        boardSol: tab,\n        solution: this.state.solution.push({\n          'x': k,\n          'y': R[j],\n          'p': undefined,\n          'finale': false,\n          'r': middle + 1 + j\n        })\n      });\n      j++;\n      k++;\n    }\n  }\n  /** heap sort */\n\n\n  heapify(n, i) {\n    let largest = i;\n    let l = 2 * i + 1;\n    let r = 2 * i + 2;\n\n    if (l < n && this.state.boardSol[l] > this.state.boardSol[largest]) {\n      largest = l;\n    }\n\n    if (r < n && this.state.boardSol[r] > this.state.boardSol[largest]) {\n      largest = r;\n    }\n\n    if (largest !== i) {\n      this.swap(i, largest, undefined, false);\n      this.heapify(n, largest);\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/walid/Bureau/sort/src/App.js"],"names":["React","Component","linkedin","cloneDeep","App","constructor","props","quickSort","debut","fin","p","partition","pivot","state","boardSol","i","j","swap","shellSort","forEach","elt","gap","length","temp","undefined","fuck","setState","selectionSort","jmin","mergeSort","middle","Math","floor","merge","heapSort","n","heapify","t","generateGrid","algo","board","speed","speedVal","orange","green","solution","finaltab","Array","from","can","l","random","onchangeGrid","tab","onchangeAlgo","e","target","value","onchangeSpeed","s","onchangeLength","sort","map","setTimeout","x","y","g","r","ilast","push","final","isorange","index","includes","isgreen","isFinal","displayBoard","numWidth","window","innerWidth","height","width","render","event","bind","f","L","R","n1","n2","k","largest"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAGA,MAAMC,GAAN,SAAkBH,SAAlB,CAA2B;AAEzBI,EAAAA,WAAW,CAACC,KAAD,EAAO;AACd,UAAMA,KAAN;;AADc,SAqOlBC,SArOkB,GAqON,CAACC,KAAD,EAAOC,GAAP,KAAe;AACvB,UAAGD,KAAK,IAAEC,GAAV,EAAc;AACZ,YAAIC,CAAC,GAAG,KAAKC,SAAL,CAAeH,KAAf,EAAqBC,GAArB,CAAR;AAGA,aAAKF,SAAL,CAAeC,KAAf,EAAqBE,CAAC,GAAC,CAAvB;AACA,aAAKH,SAAL,CAAeG,CAAC,GAAC,CAAjB,EAAmBD,GAAnB;AACD;AACJ,KA7OiB;;AAAA,SA+OlBE,SA/OkB,GA+ON,CAACH,KAAD,EAAOC,GAAP,KAAe;AACvB,UAAIG,KAAK,GAAG,KAAKC,KAAL,CAAWC,QAAX,CAAoBL,GAApB,CAAZ;AACA,UAAIM,CAAC,GAAGP,KAAR;;AACA,WAAI,IAAIQ,CAAC,GAACR,KAAV,EAAiBQ,CAAC,IAAEP,GAApB,EAAwBO,CAAC,EAAzB,EAA4B;AAC1B,YAAG,KAAKH,KAAL,CAAWC,QAAX,CAAoBE,CAApB,IAAyBJ,KAA5B,EAAkC;AAChC,eAAKK,IAAL,CAAUF,CAAV,EAAYC,CAAZ,EAAcP,GAAd,EAAkB,KAAlB;AACAM,UAAAA,CAAC,GAAGA,CAAC,GAAC,CAAN;AACD;AACF;;AACD,WAAKE,IAAL,CAAUF,CAAV,EAAYN,GAAZ,EAAgBA,GAAhB,EAAoB,IAApB;AACA,aAAOM,CAAP;AACH,KA1PiB;;AAAA,SA6PlBG,SA7PkB,GA6PN,MAAM;AAChB,WAAKL,KAAL,CAAWC,QAAX,CAAoBK,OAApB,CAA6B,CAACC,GAAD,EAAKC,GAAL,KAAY;AAEvC,aAAI,IAAIN,CAAC,GAAEM,GAAX,EAAgBN,CAAC,GAAC,KAAKF,KAAL,CAAWS,MAA7B,EAAsCP,CAAC,GAACA,CAAC,GAAC,CAA1C,EAA4C;AACxC,cAAIQ,IAAI,GAAG,KAAKV,KAAL,CAAWC,QAAX,CAAoBC,CAApB,CAAX;AACA,cAAIC,CAAC,GAAED,CAAP;;AACA,eAAIC,CAAC,GAAED,CAAP,EAAUC,CAAC,IAAIK,GAAL,IAAY,KAAKR,KAAL,CAAWC,QAAX,CAAoBE,CAAC,GAACK,GAAtB,IAA2BE,IAAjD,EAAwDP,CAAC,GAACA,CAAC,GAACK,GAA5D,EAAgE;AAC9D,iBAAKJ,IAAL,CAAUD,CAAV,EAAYA,CAAC,GAACK,GAAd,EAAkBG,SAAlB,EAA4B,KAA5B;AACD;;AACD,cAAIC,IAAI,GAAG,KAAKZ,KAAL,CAAWC,QAAtB;AACAW,UAAAA,IAAI,CAACT,CAAD,CAAJ,GAAUO,IAAV;AACA,eAAKG,QAAL,CAAc;AACZZ,YAAAA,QAAQ,EAAEW;AADE,WAAd;AAGH;AACF,OAdD;AAeD,KA7QiB;;AAAA,SAgRlBE,aAhRkB,GAgRF,MAAM;AACpB,WAAK,IAAIZ,CAAC,GAAC,CAAX,EAAaA,CAAC,GAAC,KAAKF,KAAL,CAAWS,MAAX,GAAkB,CAAjC,EAAmCP,CAAC,GAACA,CAAC,GAAC,CAAvC,EAAyC;AACvC,YAAIa,IAAI,GAAGb,CAAX;;AACA,aAAI,IAAIC,CAAC,GAACD,CAAC,GAAC,CAAZ,EAAcC,CAAC,GAAC,KAAKH,KAAL,CAAWS,MAA3B,EAAkCN,CAAC,GAACA,CAAC,GAAC,CAAtC,EAAwC;AACtC,eAAKC,IAAL,CAAUD,CAAV,EAAYA,CAAZ,EAAcQ,SAAd,EAAwB,KAAxB;;AACA,cAAG,KAAKX,KAAL,CAAWC,QAAX,CAAoBE,CAApB,IAAuB,KAAKH,KAAL,CAAWC,QAAX,CAAoBc,IAApB,CAA1B,EAAoD;AAClDA,YAAAA,IAAI,GAAGZ,CAAP;AACD;AACF;;AACD,aAAKC,IAAL,CAAUF,CAAV,EAAYa,IAAZ,EAAiBJ,SAAjB,EAA2B,IAA3B;AACD;;AACD,WAAKP,IAAL,CAAU,KAAKJ,KAAL,CAAWS,MAAX,GAAkB,CAA5B,EAA8B,KAAKT,KAAL,CAAWS,MAAX,GAAkB,CAAhD,EAAkDE,SAAlD,EAA4D,IAA5D;AACD,KA5RiB;;AAAA,SA+RlBK,SA/RkB,GA+RN,CAACrB,KAAD,EAAOC,GAAP,KAAe;AACzB,UAAI,KAAGD,KAAH,IAAYA,KAAK,GAACC,GAAtB,EAA2B;AACzB,YAAIqB,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAW,CAACvB,GAAG,GAAGD,KAAP,IAAc,CAAzB,CAAb;AACA,aAAKqB,SAAL,CAAerB,KAAf,EAAqBsB,MAArB;AACA,aAAKD,SAAL,CAAeC,MAAM,GAAC,CAAtB,EAAwBrB,GAAxB;AACA,aAAKwB,KAAL,CAAWzB,KAAX,EAAiBsB,MAAjB,EAAwBrB,GAAxB;AACD;AACF,KAtSiB;;AAAA,SAwWlByB,QAxWkB,GAwWP,MAAM;AACf,UAAIC,CAAC,GAAG,KAAKtB,KAAL,CAAWS,MAAnB;;AACA,WAAK,IAAIP,CAAC,GAAGoB,CAAC,GAAC,CAAf,EAAkBpB,CAAC,IAAI,CAAvB,EAA0BA,CAAC,EAA3B,EAA8B;AAC5B,aAAKqB,OAAL,CAAaD,CAAb,EAAgBpB,CAAhB;AACD;;AACD,WAAK,IAAIA,CAAC,GAACoB,CAAC,GAAC,CAAb,EAAgBpB,CAAC,IAAE,CAAnB,EAAsBA,CAAC,EAAvB,EACI;AACI,aAAKE,IAAL,CAAUF,CAAV,EAAY,CAAZ,EAAcS,SAAd,EAAwB,IAAxB;AACA,aAAKY,OAAL,CAAarB,CAAb,EAAgB,CAAhB;AACH;AACN,KAlXiB;;AAEd,QAAIsB,CAAC,GAAG,KAAKC,YAAL,CAAkB,EAAlB,CAAR;AAEA,SAAKzB,KAAL,GAAa;AACX0B,MAAAA,IAAI,EAAE,WADK;AAEXjB,MAAAA,MAAM,EAAE,EAFG;AAGXkB,MAAAA,KAAK,EAAEH,CAHI;AAIXvB,MAAAA,QAAQ,EAAEX,SAAS,CAACkC,CAAD,CAJR;AAKXI,MAAAA,KAAK,EAAE,MALI;AAMXC,MAAAA,QAAQ,EAAE,GANC;AAOXC,MAAAA,MAAM,EAAC,EAPI;AAQXC,MAAAA,KAAK,EAAC,EARK;AASXC,MAAAA,QAAQ,EAAC,EATE;AAUXC,MAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAC1B,QAAAA,MAAM,EAAE;AAAT,OAAX,EAAyB,MAAM,CAA/B,CAVC;AAWX2B,MAAAA,GAAG,EAAC;AAXO,KAAb;AAaH;;AAEDX,EAAAA,YAAY,CAACY,CAAD,EAAG;AACb,WAAOH,KAAK,CAACC,IAAN,CAAW;AAAC1B,MAAAA,MAAM,EAAE4B;AAAT,KAAX,EAAwB,MAAMnB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACoB,MAAL,KAAgB,GAA3B,CAA9B,CAAP;AACD;;AAEDC,EAAAA,YAAY,GAAE;AACZ,QAAIC,GAAG,GAAE,KAAKf,YAAL,CAAkB,KAAKzB,KAAL,CAAWS,MAA7B,CAAT;AACA,SAAKI,QAAL,CAAc;AACZc,MAAAA,KAAK,EAACa,GADM;AAEZvC,MAAAA,QAAQ,EAAEX,SAAS,CAACkD,GAAD,CAFP;AAGZV,MAAAA,MAAM,EAACxC,SAAS,CAAC,EAAD,CAHJ;AAIZyC,MAAAA,KAAK,EAACzC,SAAS,CAAC,EAAD,CAJH;AAKZ0C,MAAAA,QAAQ,EAAE,EALE;AAMZC,MAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAC1B,QAAAA,MAAM,EAAE,KAAKT,KAAL,CAAWS;AAApB,OAAX,EAAwC,MAAM,CAA9C,CANE;AAOZ2B,MAAAA,GAAG,EAAC;AAPQ,KAAd;AASA;;AAEFK,EAAAA,YAAY,CAACC,CAAD,EAAG;AACb,SAAK7B,QAAL,CAAc;AACZa,MAAAA,IAAI,EAAGgB,CAAC,CAACC,MAAF,CAASC;AADJ,KAAd;AAGD;;AAEDC,EAAAA,aAAa,CAACH,CAAD,EAAG;AACd,QAAII,CAAC,GAAE,GAAP;;AAEA,QAAIJ,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,SAAvB,EAAiC;AAC/BE,MAAAA,CAAC,GAAC,GAAF;AACD,KAFD,MAEM,IAAGJ,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,MAAtB,EAA6B;AACjCE,MAAAA,CAAC,GAAC,GAAF;AACD;;AACD,SAAKjC,QAAL,CAAc;AACZe,MAAAA,KAAK,EAAGc,CAAC,CAACC,MAAF,CAASC,KADL;AAEZf,MAAAA,QAAQ,EAAGiB;AAFC,KAAd;AAID;;AAEDC,EAAAA,cAAc,CAACL,CAAD,EAAG;AACf,QAAGA,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,KAAK5C,KAAL,CAAWS,MAAjC,EAAyC;AACvC,UAAI4B,CAAC,GAAIK,CAAC,CAACC,MAAF,CAASC,KAAlB;AACA,UAAIJ,GAAG,GAAE,KAAKf,YAAL,CAAkBY,CAAlB,CAAT;AACA,WAAKxB,QAAL,CAAc;AACZJ,QAAAA,MAAM,EAAE4B,CADI;AAEZV,QAAAA,KAAK,EAAEa,GAFK;AAGZvC,QAAAA,QAAQ,EAAEX,SAAS,CAACkD,GAAD,CAHP;AAIZR,QAAAA,QAAQ,EAAC,EAJG;AAKZD,QAAAA,KAAK,EAAE,EALK;AAMZD,QAAAA,MAAM,EAAC,EANK;AAOZG,QAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAW;AAAC1B,UAAAA,MAAM,EAAE4B;AAAT,SAAX,EAAwB,MAAM,CAA9B,CAPE;AAQZD,QAAAA,GAAG,EAAC;AARQ,OAAd;AAUD;AACF;;AAEDY,EAAAA,IAAI,GAAE;AACJ,QAAG,KAAKhD,KAAL,CAAWoC,GAAd,EAAkB;AAChB,WAAKvB,QAAL,CAAc;AACZuB,QAAAA,GAAG,EAAE;AADO,OAAd;;AAGA,UAAG,KAAKpC,KAAL,CAAW0B,IAAX,KAAoB,WAAvB,EAAmC;AACjC,aAAKhC,SAAL,CAAe,CAAf,EAAiB,KAAKM,KAAL,CAAWS,MAAX,GAAkB,CAAnC;AACD,OAFD,MAEM,IAAG,KAAKT,KAAL,CAAW0B,IAAX,KAAoB,YAAvB,EAAoC;AACxC,aAAKV,SAAL,CAAe,CAAf,EAAiB,KAAKhB,KAAL,CAAW2B,KAAX,CAAiBlB,MAAjB,GAAwB,CAAzC;AACD,OAFK,MAEA,IAAG,KAAKT,KAAL,CAAW0B,IAAX,KAAoB,WAAvB,EAAmC;AACvC,aAAKrB,SAAL;AACD,OAFK,MAEA,IAAG,KAAKL,KAAL,CAAW0B,IAAX,KAAoB,gBAAvB,EAAwC;AAC5C,aAAKZ,aAAL;AACD,OAFK,MAEA,IAAG,KAAKd,KAAL,CAAW0B,IAAX,KAAoB,UAAvB,EAAkC;AACtC,aAAKL,QAAL;AACD;;AACD,UAAG,KAAKrB,KAAL,CAAW0B,IAAX,KAAoB,YAAvB,EAAoC;AAClC,aAAK1B,KAAL,CAAWgC,QAAX,CAAoBiB,GAApB,CAAyB,CAACP,CAAD,EAAGxC,CAAH,KAAS;AAChC,iBAAOgD,UAAU,CAAC,MAAM;AACtB,gBAAIV,GAAG,GAAG,KAAKxC,KAAL,CAAW2B,KAArB;AACAa,YAAAA,GAAG,CAACE,CAAC,CAACS,CAAH,CAAH,GAAWT,CAAC,CAACU,CAAb;AACA,gBAAIC,CAAC,GAAG,CAACX,CAAC,CAACS,CAAH,EAAKT,CAAC,CAACY,CAAP,CAAR;AACA,iBAAKzC,QAAL,CAAc;AACZc,cAAAA,KAAK,EAAEa,GADK;AAEZT,cAAAA,KAAK,EAAEsB;AAFK,aAAd;AAID,WARgB,EAQd,KAAKrD,KAAL,CAAW6B,QAAX,GAAoB3B,CARN,CAAjB;AASD,SAVD;AAWD,OAZD,MAYK;AACH,aAAKF,KAAL,CAAWgC,QAAX,CAAoBiB,GAApB,CAAyB,CAACP,CAAD,EAAGxC,CAAH,KAAS;AAC9B,iBAAOgD,UAAU,CAAC,MAAM;AACtB,gBAAIV,GAAG,GAAG,KAAKxC,KAAL,CAAW2B,KAArB;AACA,gBAAI4B,KAAK,GAAG,KAAKvD,KAAL,CAAW2B,KAAX,CAAiBe,CAAC,CAACS,CAAnB,CAAZ;AACAX,YAAAA,GAAG,CAACE,CAAC,CAACS,CAAH,CAAH,GAAW,KAAKnD,KAAL,CAAW2B,KAAX,CAAiBe,CAAC,CAACU,CAAnB,CAAX;AACAZ,YAAAA,GAAG,CAACE,CAAC,CAACU,CAAH,CAAH,GAAWG,KAAX;AACA,gBAAIF,CAAC,GAAG,CAACX,CAAC,CAACS,CAAH,EAAKT,CAAC,CAACU,CAAP,CAAR;AACA,gBAAIE,CAAC,GAAG,EAAR;AACA,gBAAGZ,CAAC,CAAC7C,CAAF,KAAQc,SAAX,EAAsB2C,CAAC,CAACE,IAAF,CAAOd,CAAC,CAAC7C,CAAT;;AACtB,gBAAG6C,CAAC,CAACe,KAAL,EAAW;AACT,kBAAIjC,CAAC,GAAG,KAAKxB,KAAL,CAAWiC,QAAnB;AACAT,cAAAA,CAAC,CAACkB,CAAC,CAACS,CAAH,CAAD,GAAO,CAAP;AACA,mBAAKtC,QAAL,CAAc;AACZoB,gBAAAA,QAAQ,EAAGT;AADC,eAAd;AAGD;;AAED,iBAAKX,QAAL,CAAc;AACZkB,cAAAA,KAAK,EAACsB,CADM;AAEZvB,cAAAA,MAAM,EAAEwB,CAFI;AAGZ3B,cAAAA,KAAK,EAAEa;AAHK,aAAd;AAKD,WArBgB,EAqBd,KAAKxC,KAAL,CAAW6B,QAAX,GAAoB3B,CArBN,CAAjB;AAsBH,SAvBD;AAwBD;AACF;AACF;;AAEDwD,EAAAA,QAAQ,CAACC,KAAD,EAAO;AACb,WAAO,KAAK3D,KAAL,CAAW8B,MAAX,CAAkB8B,QAAlB,CAA2BD,KAA3B,CAAP;AACD;;AAEDE,EAAAA,OAAO,CAACF,KAAD,EAAO;AACZ,WAAO,KAAK3D,KAAL,CAAW+B,KAAX,CAAiB6B,QAAjB,CAA0BD,KAA1B,CAAP;AACD;;AAEDG,EAAAA,OAAO,CAACH,KAAD,EAAO;AACZ,WAAO,KAAK3D,KAAL,CAAWiC,QAAX,CAAoB0B,KAApB,MAA+B,CAAtC;AACD;;AAEDI,EAAAA,YAAY,GAAE;AACZ,UAAMC,QAAQ,GAAG9C,IAAI,CAACC,KAAL,CAAW8C,MAAM,CAACC,UAAP,IAAqB,KAAKlE,KAAL,CAAWS,MAAX,GAAoB,CAAzC,CAAX,CAAjB;AACA,wBACE;AAAK,MAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKT,KAAL,CAAW2B,KAAX,CAAiBsB,GAAjB,CAAqB,CAACL,KAAD,EAAQe,KAAR,KAAkB;AACtC,0BAAO;AAAK,QAAA,GAAG,EAAEA,KAAV;AAAiB,QAAA,SAAS,EAAG,kBAAiB,KAAKG,OAAL,CAAaH,KAAb,IAAsB,KAAtB,GAA6B,KAAKE,OAAL,CAAaF,KAAb,IAAsB,OAAtB,GAAgC,KAAKD,QAAL,CAAcC,KAAd,IAAuB,QAAvB,GAAkC,EAAG,EAAhJ;AAAmJ,QAAA,KAAK,EAAE;AAACQ,UAAAA,MAAM,EAAG,GAAEvB,KAAK,GAAG,CAAE,IAAtB;AAA2BwB,UAAAA,KAAK,EAAE,GAAEJ,QAAS;AAA7C,SAA1J;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AAED,KAHA,CADH,CADF;AAQD;;AAGDK,EAAAA,MAAM,GAAG;AACP,wBACE;AAAK,MAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAQ,MAAA,SAAS,EAAC,YAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAyB,MAAA,IAAI,EAAC,QAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAEE;AAAQ,MAAA,KAAK,EAAE,KAAKrE,KAAL,CAAW0B,IAA1B;AAAgC,MAAA,QAAQ,EAAG4C,KAAD,IAAW,KAAK7B,YAAL,CAAkB6B,KAAlB,CAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF,eAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAJF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBALF,CAFF,eASE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MATF,eAUE;AAAQ,MAAA,OAAO,EAAE,KAAK/B,YAAL,CAAkBgC,IAAlB,CAAuB,IAAvB,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAVF,eAWE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAXF,yBAcE;AAAO,MAAA,KAAK,EAAE,KAAKvE,KAAL,CAAWS,MAAzB;AAAiC,MAAA,IAAI,EAAC,OAAtC;AAA8C,MAAA,GAAG,EAAC,GAAlD;AAAsD,MAAA,GAAG,EAAC,KAA1D;AAAgE,MAAA,QAAQ,EAAG6D,KAAD,IAAW,KAAKvB,cAAL,CAAoBuB,KAApB,CAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAdF,eAeE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAfF,wBAiBE;AAAQ,MAAA,KAAK,EAAE,KAAKtE,KAAL,CAAW4B,KAA1B;AAAiC,MAAA,QAAQ,EAAG0C,KAAD,IAAW,KAAKzB,aAAL,CAAmByB,KAAnB,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,CAjBF,eAsBE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAtBF,eAuBE;AAAQ,MAAA,OAAO,EAAE,KAAKtB,IAAL,CAAUuB,IAAV,CAAe,IAAf,CAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,eAwBE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAxBF,eAyBE;AAAG,MAAA,IAAI,EAAC,sDAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,KAAK,EAAC,IAAX;AAAgB,MAAA,GAAG,EAAElF,QAArB;AAA+B,MAAA,GAAG,EAAC,UAAnC;AAA8C,MAAA,KAAK,EAAC,UAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAzBF,CADF,EA8BG,KAAK0E,YAAL,EA9BH,eA+BE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,KAAd;AAAoB,MAAA,KAAK,EAAC,IAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAuB,MAAA,KAAK,EAAC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFF,CALF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,OAAd;AAAsB,MAAA,KAAK,EAAC,IAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCAFF,CATF,eAaE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAI,MAAA,SAAS,EAAC,QAAd;AAAuB,MAAA,KAAK,EAAC,IAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8BAFF,CAbF,CADF,CA/BF,CADF,CADF;AAwDD;AAED;;AAEA;;;AACA3D,EAAAA,IAAI,CAACF,CAAD,EAAGC,CAAH,EAAKJ,KAAL,EAAWyE,CAAX,EAAc;AAChB,QAAIhC,GAAG,GAAG,KAAKxC,KAAL,CAAWC,QAArB;AACA,QAAIsD,KAAK,GAAG,KAAKvD,KAAL,CAAWC,QAAX,CAAoBC,CAApB,CAAZ;AACAsC,IAAAA,GAAG,CAACtC,CAAD,CAAH,GAAS,KAAKF,KAAL,CAAWC,QAAX,CAAoBE,CAApB,CAAT;AACAqC,IAAAA,GAAG,CAACrC,CAAD,CAAH,GAASoD,KAAT;AACA,SAAK1C,QAAL,CAAc;AACZZ,MAAAA,QAAQ,EAAEuC,GADE;AAEZR,MAAAA,QAAQ,EAAE,KAAKhC,KAAL,CAAWgC,QAAX,CAAoBwB,IAApB,CAAyB;AAAC,aAAItD,CAAL;AAAO,aAAIC,CAAX;AAAa,aAAIJ,KAAjB;AAAuB,iBAAQyE;AAA/B,OAAzB;AAFE,KAAd;AAID;AAED;;;AAoEApD,EAAAA,KAAK,CAACzB,KAAD,EAAOsB,MAAP,EAAcrB,GAAd,EAAkB;AACrB,QAAI6E,CAAC,GAAG,EAAR;AACA,QAAIC,CAAC,GAAG,EAAR;AACA,QAAIC,EAAE,GAAG1D,MAAM,GAAGtB,KAAT,GAAiB,CAA1B;AACA,QAAIiF,EAAE,GAAGhF,GAAG,GAAGqB,MAAf;;AAEA,SAAK,IAAIf,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACyE,EAAhB,EAAoB,EAAEzE,CAAtB,EAAwB;AACtBuE,MAAAA,CAAC,CAACjB,IAAF,CAAO,KAAKxD,KAAL,CAAWC,QAAX,CAAoBN,KAAK,GAAGO,CAA5B,CAAP;AACD;;AACD,SAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACyE,EAAhB,EAAoB,EAAEzE,CAAtB,EAAwB;AACtBuE,MAAAA,CAAC,CAAClB,IAAF,CAAO,KAAKxD,KAAL,CAAWC,QAAX,CAAoBgB,MAAM,GAAG,CAAT,GAAYd,CAAhC,CAAP;AACD;;AAED,QAAID,CAAC,GAAG,CAAR;AACA,QAAIC,CAAC,GAAG,CAAR;AACA,QAAI0E,CAAC,GAAGlF,KAAR;;AACA,WAAMO,CAAC,GAACyE,EAAF,IAAQxE,CAAC,GAACyE,EAAhB,EAAmB;AACjB,UAAGH,CAAC,CAACvE,CAAD,CAAD,IAAOwE,CAAC,CAACvE,CAAD,CAAX,EAAe;AACb,YAAIqC,GAAG,GAAG,KAAKxC,KAAL,CAAWC,QAArB;AACAuC,QAAAA,GAAG,CAACqC,CAAD,CAAH,GAAQJ,CAAC,CAACvE,CAAD,CAAT;AACA,aAAKW,QAAL,CAAc;AACZZ,UAAAA,QAAQ,EAAGuC,GADC;AAEZR,UAAAA,QAAQ,EAAG,KAAKhC,KAAL,CAAWgC,QAAX,CAAoBwB,IAApB,CAAyB;AAAC,iBAAIqB,CAAL;AAAO,iBAAIJ,CAAC,CAACvE,CAAD,CAAZ;AAAgB,iBAAIS,SAApB;AAA8B,sBAAS,KAAvC;AAA6C,iBAAIhB,KAAK,GAAGO;AAAzD,WAAzB;AAFC,SAAd;AAIAA,QAAAA,CAAC;AACF,OARD,MAQK;AACH,YAAIsC,GAAG,GAAG,KAAKxC,KAAL,CAAWC,QAArB;AACAuC,QAAAA,GAAG,CAACqC,CAAD,CAAH,GAAQH,CAAC,CAACvE,CAAD,CAAT;AACA,aAAKU,QAAL,CAAc;AACZZ,UAAAA,QAAQ,EAAGuC,GADC;AAEZR,UAAAA,QAAQ,EAAG,KAAKhC,KAAL,CAAWgC,QAAX,CAAoBwB,IAApB,CAAyB;AAAC,iBAAIqB,CAAL;AAAO,iBAAIH,CAAC,CAACvE,CAAD,CAAZ;AAAgB,iBAAIQ,SAApB;AAA8B,sBAAS,KAAvC;AAA6C,iBAAIM,MAAM,GAAG,CAAT,GAAYd;AAA7D,WAAzB;AAFC,SAAd;AAIAA,QAAAA,CAAC;AACF;;AACD0E,MAAAA,CAAC;AACF;AACD;;;AACA,WAAO3E,CAAC,GAAGyE,EAAX,EACA;AACI,UAAInC,GAAG,GAAG,KAAKxC,KAAL,CAAWC,QAArB;AACAuC,MAAAA,GAAG,CAACqC,CAAD,CAAH,GAAQJ,CAAC,CAACvE,CAAD,CAAT;AACA,WAAKW,QAAL,CAAc;AACZZ,QAAAA,QAAQ,EAAGuC,GADC;AAEZR,QAAAA,QAAQ,EAAG,KAAKhC,KAAL,CAAWgC,QAAX,CAAoBwB,IAApB,CAAyB;AAAC,eAAIqB,CAAL;AAAO,eAAIJ,CAAC,CAACvE,CAAD,CAAZ;AAAgB,eAAIS,SAApB;AAA8B,oBAAS,KAAvC;AAA6C,eAAIhB,KAAK,GAAGO;AAAzD,SAAzB;AAFC,OAAd;AAIAA,MAAAA,CAAC;AACD2E,MAAAA,CAAC;AACJ;AAED;;;AACA,WAAO1E,CAAC,GAAGyE,EAAX,EACA;AACI,UAAIpC,GAAG,GAAG,KAAKxC,KAAL,CAAWC,QAArB;AACAuC,MAAAA,GAAG,CAACqC,CAAD,CAAH,GAAQH,CAAC,CAACvE,CAAD,CAAT;AACA,WAAKU,QAAL,CAAc;AACZZ,QAAAA,QAAQ,EAAGuC,GADC;AAEZR,QAAAA,QAAQ,EAAG,KAAKhC,KAAL,CAAWgC,QAAX,CAAoBwB,IAApB,CAAyB;AAAC,eAAIqB,CAAL;AAAO,eAAIH,CAAC,CAACvE,CAAD,CAAZ;AAAgB,eAAIQ,SAApB;AAA8B,oBAAS,KAAvC;AAA6C,eAAIM,MAAM,GAAG,CAAT,GAAYd;AAA7D,SAAzB;AAFC,OAAd;AAIAA,MAAAA,CAAC;AACD0E,MAAAA,CAAC;AACJ;AACF;AAED;;;AAaAtD,EAAAA,OAAO,CAACD,CAAD,EAAGpB,CAAH,EAAK;AACV,QAAI4E,OAAO,GAAG5E,CAAd;AACA,QAAImC,CAAC,GAAG,IAAEnC,CAAF,GAAM,CAAd;AACA,QAAIoD,CAAC,GAAG,IAAEpD,CAAF,GAAM,CAAd;;AAEA,QAAImC,CAAC,GAAGf,CAAJ,IAAS,KAAKtB,KAAL,CAAWC,QAAX,CAAoBoC,CAApB,IAAyB,KAAKrC,KAAL,CAAWC,QAAX,CAAoB6E,OAApB,CAAtC,EAAoE;AAClEA,MAAAA,OAAO,GAAGzC,CAAV;AACD;;AAED,QAAIiB,CAAC,GAAGhC,CAAJ,IAAS,KAAKtB,KAAL,CAAWC,QAAX,CAAoBqD,CAApB,IAAyB,KAAKtD,KAAL,CAAWC,QAAX,CAAoB6E,OAApB,CAAtC,EAAmE;AACjEA,MAAAA,OAAO,GAAGxB,CAAV;AACD;;AAED,QAAIwB,OAAO,KAAK5E,CAAhB,EACA;AACI,WAAKE,IAAL,CAAUF,CAAV,EAAY4E,OAAZ,EAAoBnE,SAApB,EAA8B,KAA9B;AACA,WAAKY,OAAL,CAAaD,CAAb,EAAgBwD,OAAhB;AACH;AACF;;AAxYwB;;AA2Y3B,eAAevF,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport linkedin from './linkedin.png'\nimport cloneDeep from 'lodash/cloneDeep';\n\n\nclass App extends Component{\n  \n  constructor(props){\n      super(props)\n      let t = this.generateGrid(30)\n\n      this.state = {\n        algo: 'Quicksort', \n        length: 30,\n        board: t,\n        boardSol: cloneDeep(t),\n        speed: 'Fast',\n        speedVal: 100,\n        orange:[],\n        green:[],\n        solution:[],\n        finaltab: Array.from({length: 30}, () => 0),\n        can:true\n      }\n  }\n\n  generateGrid(l){\n    return Array.from({length: l}, () => Math.floor(Math.random() * 100));\n  }\n\n  onchangeGrid(){\n    let tab= this.generateGrid(this.state.length)\n    this.setState({\n      board:tab,\n      boardSol: cloneDeep(tab),\n      orange:cloneDeep([]),\n      green:cloneDeep([]),\n      solution: [],\n      finaltab: Array.from({length: this.state.length}, () => 0),\n      can:true\n    })\n   }\n\n  onchangeAlgo(e){\n    this.setState({\n      algo : e.target.value\n    })\n  }\n\n  onchangeSpeed(e){\n    let s= 100\n\n    if( e.target.value === 'Average'){\n      s=200\n    }else if(e.target.value === 'Slow'){\n      s=400\n    }\n    this.setState({\n      speed : e.target.value,\n      speedVal : s\n    })\n  }\n\n  onchangeLength(e){\n    if(e.target.value !== this.state.length ){\n      let l =  e.target.value\n      let tab= this.generateGrid(l)\n      this.setState({\n        length: l,\n        board: tab,\n        boardSol: cloneDeep(tab),\n        solution:[],\n        green :[],\n        orange:[],\n        finaltab: Array.from({length: l}, () => 0),\n        can:true\n      })\n    }\n  }\n\n  sort(){\n    if(this.state.can){\n      this.setState({\n        can: false\n      })\n      if(this.state.algo === 'Quicksort'){\n        this.quickSort(0,this.state.length-1)\n      }else if(this.state.algo === 'Merge sort'){\n        this.mergeSort(0,this.state.board.length-1)\n      }else if(this.state.algo === 'Shellsort'){\n        this.shellSort()\n      }else if(this.state.algo === 'selection Sort'){\n        this.selectionSort()\n      }else if(this.state.algo === 'Heapsort'){\n        this.heapSort()\n      }\n      if(this.state.algo === 'Merge sort'){\n        this.state.solution.map( (e,i) => {\n          return setTimeout(() => {\n            let tab = this.state.board\n            tab[e.x] = e.y\n            let g = [e.x,e.r]\n            this.setState({\n              board: tab,\n              green: g,\n            })\n          }, this.state.speedVal*i)\n        })\n      }else{\n        this.state.solution.map( (e,i) => {\n            return setTimeout(() => {\n              let tab = this.state.board\n              let ilast = this.state.board[e.x];\n              tab[e.x] = this.state.board[e.y];\n              tab[e.y] = ilast;\n              let g = [e.x,e.y]\n              let r = []\n              if(e.p !== undefined) r.push(e.p)\n              if(e.final){\n                let t = this.state.finaltab\n                t[e.x]=1\n                this.setState({\n                  finaltab : t\n                })\n              }\n\n              this.setState({\n                green:g,\n                orange: r,\n                board: tab,\n              })\n            }, this.state.speedVal*i)\n        })\n      }\n    } \n  }\n\n  isorange(index){\n    return this.state.orange.includes(index)\n  }\n\n  isgreen(index){\n    return this.state.green.includes(index)\n  }\n\n  isFinal(index){\n    return this.state.finaltab[index] === 1\n  }\n\n  displayBoard(){\n    const numWidth = Math.floor(window.innerWidth / (this.state.length * 3))\n    return (\n      <div id=\"bodyContainer\">\n        {this.state.board.map((value, index) => {\n          return <div key={index} className={`arrayElement , ${this.isFinal(index) ? 'res': this.isgreen(index) ? 'green' : this.isorange(index) ? 'orange' : ''}`} style={{height: `${value * 3}px`, width:`${numWidth}px`}}>\n                 </div>\n        })}\n      </div>\n    )\n  }\n  \n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <div className=\"toolbar\" role=\"banner\">\n            Algorithms\n            <select value={this.state.algo} onChange={(event) => this.onchangeAlgo(event)}> \n              <option>Quicksort</option>\n              <option>Merge sort</option>\n              <option>Heapsort</option>\n              <option>Shellsort</option>\n              <option>selection Sort</option>\n            </select>\n            <div className=\"spacer\"></div>\n            <button onClick={this.onchangeGrid.bind(this)}>generate Grid</button>\n            <div className=\"spacer\"></div>\n\n            length\n            <input value={this.state.length} type=\"range\" min=\"0\" max=\"100\" onChange={(event) => this.onchangeLength(event)}></input>\n            <div className=\"spacer\"></div>\n            Speed\n            <select value={this.state.speed} onChange={(event) => this.onchangeSpeed(event)}> \n              <option>Fast</option>\n              <option>Average</option>\n              <option>Slow</option>\n            </select>            \n            <div className=\"spacer\"></div>\n            <button onClick={this.sort.bind(this)}>Sort</button>\n            <div className=\"spacer\"></div>\n            <a href=\"https://www.linkedin.com/in/walid-boukris-179771157/\">\n              <img width='40' src={linkedin} alt='Linkedin' title='linkedin'/>\n            </a>\n          </div>\n          {this.displayBoard()}    \n          <table>\n            <tbody>\n              <tr>\n                <td className=\"res\" width='40'></td>\n                <td>final Position</td>\n              </tr>\n              <tr>\n                <td className=\"orange\" width='40'></td>\n                <td>pivot</td>\n              </tr>\n              <tr>\n                <td className=\"green\" width='40'></td>\n                <td>position in traitement</td>\n              </tr>\n              <tr>\n                <td className=\"normal\" width='40'></td>\n                <td>non treated position</td>\n              </tr>\n            </tbody>\n          </table>\n        </header>\n      </div>\n    );\n  }\n\n  /* AlgoooooooooooooooooooooooooooooooooooooooooS */\n  \n  /** Swap Function */\n  swap(i,j,pivot,f) {\n    let tab = this.state.boardSol\n    let ilast = this.state.boardSol[i];\n    tab[i] = this.state.boardSol[j];\n    tab[j] = ilast;\n    this.setState({\n      boardSol: tab,\n      solution: this.state.solution.push({'x':i,'y':j,'p':pivot,'final':f})\n    }) \n  }\n\n  /** Quicksort */\n  quickSort = (debut,fin) => {\n      if(debut<=fin){\n        let p = this.partition(debut,fin);\n\n\n        this.quickSort(debut,p-1)\n        this.quickSort(p+1,fin)    \n      }\n  }\n\n  partition = (debut,fin) => {\n      let pivot = this.state.boardSol[fin];\n      let i = debut;\n      for(let j=debut; j<=fin;j++){\n        if(this.state.boardSol[j] < pivot){\n          this.swap(i,j,fin,false)\n          i = i+1;\n        }\n      }\n      this.swap(i,fin,fin,true)\n      return i\n  }\n\n  /** Shellsort */\n  shellSort = () => {\n    this.state.boardSol.forEach( (elt,gap)=> {\n      \n      for(let i= gap; i<this.state.length ; i=i+1){\n          let temp = this.state.boardSol[i]\n          let j= i\n          for(j= i; j >= gap && this.state.boardSol[j-gap]>temp ; j=j-gap){\n            this.swap(j,j-gap,undefined,false)\n          }\n          let fuck = this.state.boardSol\n          fuck[j] = temp\n          this.setState({\n            boardSol: fuck\n          })\n      }\n    })\n  }\n\n  /** selection sort */\n  selectionSort = () => {\n    for( let i=0;i<this.state.length-1;i=i+1){\n      let jmin = i\n      for(let j=i+1;j<this.state.length;j=j+1){\n        this.swap(j,j,undefined,false)\n        if(this.state.boardSol[j]<this.state.boardSol[jmin]){\n          jmin = j \n        }\n      }\n      this.swap(i,jmin,undefined,true)\n    }\n    this.swap(this.state.length-1,this.state.length-1,undefined,true)\n  }\n  \n  /** merge sort */\n  mergeSort = (debut,fin) => {\n    if( 0<=debut && debut<fin ){\n      let middle = Math.floor((fin + debut)/2)\n      this.mergeSort(debut,middle)\n      this.mergeSort(middle+1,fin)\n      this.merge(debut,middle,fin)\n    }\n  }\n\n  merge(debut,middle,fin){\n    let L = []\n    let R = []\n    let n1 = middle - debut + 1; \n    let n2 = fin - middle; \n\n    for (let i=0; i<n1; ++i){\n      L.push(this.state.boardSol[debut + i]) \n    }\n    for (let j=0; j<n2; ++j){\n      R.push(this.state.boardSol[middle + 1+ j])\n    }  \n    \n    let i = 0\n    let j = 0\n    let k = debut\n    while(i<n1 && j<n2){\n      if(L[i]<= R[j]){\n        let tab = this.state.boardSol\n        tab[k]= L[i]\n        this.setState({\n          boardSol : tab,\n          solution : this.state.solution.push({'x':k,'y':L[i],'p':undefined,'finale':false,'r':debut + i})\n        })\n        i++\n      }else{\n        let tab = this.state.boardSol\n        tab[k]= R[j]\n        this.setState({\n          boardSol : tab,\n          solution : this.state.solution.push({'x':k,'y':R[j],'p':undefined,'finale':false,'r':middle + 1+ j})\n        })\n        j++\n      }\n      k++\n    }\n    /* Copy remaining elements of L[] if any */\n    while (i < n1) \n    { \n        let tab = this.state.boardSol\n        tab[k]= L[i]\n        this.setState({\n          boardSol : tab,\n          solution : this.state.solution.push({'x':k,'y':L[i],'p':undefined,'finale':false,'r':debut + i})\n        })\n        i++; \n        k++; \n    } \n\n    /* Copy remaining elements of R[] if any */\n    while (j < n2) \n    { \n        let tab = this.state.boardSol\n        tab[k]= R[j]\n        this.setState({\n          boardSol : tab,\n          solution : this.state.solution.push({'x':k,'y':R[j],'p':undefined,'finale':false,'r':middle + 1+ j})\n        }) \n        j++; \n        k++; \n    } \n  }\n\n  /** heap sort */\n  heapSort = () => {\n    let n = this.state.length\n    for (let i = n-1; i >= 0; i--){\n      this.heapify(n, i);\n    } \n    for (let i=n-1; i>=0; i--) \n        { \n            this.swap(i,0,undefined,true)\n            this.heapify(i, 0); \n        } \n  }\n\n  heapify(n,i){\n    let largest = i;\n    let l = 2*i + 1;\n    let r = 2*i + 2;\n\n    if (l < n && this.state.boardSol[l] > this.state.boardSol[largest]) {\n      largest = l; \n    }\n      \n    if (r < n && this.state.boardSol[r] > this.state.boardSol[largest]){\n      largest = r; \n    }\n      \n    if (largest !== i) \n    { \n        this.swap(i,largest,undefined,false)\n        this.heapify(n, largest); \n    } \n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}